import os
import django


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "telegramm_bot.settings")
django.setup()


from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, LabeledPrice
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, PreCheckoutQueryHandler
from bot.models import Participant, Donat, Question, Event, Message
from django.utils.timezone import now
from decimal import Decimal
from telegram_tools.event_utils import update_event_activity


def build_main_menu(is_organizer=False):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    buttons = [
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π"],
        ["üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"]
    ]
    if is_organizer:
        buttons.append(["–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def build_donate_menu():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–Ω–∞—Ç–∞"""
    buttons = [
        ["100", "200", "500"],
        ["–°–≤–æ—è —Å—É–º–º–∞"],
        ["–ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def send_main_menu(chat_id: int, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    participant = Participant.objects.filter(tg_id=chat_id).first()
    is_organizer = participant.organizer if participant else False

    context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ",
        reply_markup=build_main_menu(is_organizer=is_organizer)
    )


def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é"""
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –∏ —Å–ø–∏–∫–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!"

    tg_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    Participant.objects.get_or_create(tg_id=tg_id, defaults={"name": username})

    chat_id = update.effective_chat.id
    context.bot.send_message(
        chat_id=chat_id,
        text=welcome_text
    )
    send_main_menu(chat_id, context)


def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    user_states = context.bot_data.setdefault("user_states", {})

    if user_states.get(user_id) == "awaiting_question":
        user_states[user_id] = None

        username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        participant, _ = Participant.objects.get_or_create(
            tg_id=chat_id,
            defaults={"name": username}
        )

        active_event = Event.objects.filter(
            start__lte=now(),
            finish__gte=now(),
            speaker__isnull=False
        ).first()

        Question.objects.create(
            author=participant,
            question=text,
            event=active_event,
            tg_chat_id=chat_id
        )

        context.bot.send_message(
            chat_id=chat_id,
            text="–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω."
        )

        if active_event and active_event.speaker and active_event.speaker.tg_id:
            context.bot.send_message(
                chat_id=active_event.speaker.tg_id,
                text=f"–í–∞–º –ø—Ä–∏—à—ë–ª –≤–æ–ø—Ä–æ—Å –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ @{username}:\n{text}"
            )

        organizers = Participant.objects.filter(organizer=True, tg_id__isnull=False)

        for org in organizers:
            context.bot.send_message(
                chat_id=org.tg_id,
                text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username}:\n{text}"
            )
        return send_main_menu(chat_id, context)

    if text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É":
        update_event_activity()
        events = Event.objects.filter(finish__gte=now()).order_by("start")

        if not events.exists():
            context.bot.send_message(chat_id=chat_id, text="–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        messages = []
        for event in events:
            title = event.name
            date = event.start.strftime("%d.%m.%Y")
            time_range = f"{event.start.strftime('%H:%M')}‚Äì{event.finish.strftime('%H:%M')}"
            place = event.place.name if event.place else "–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ"
            speaker = event.speaker.name if event.speaker else "–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ"

            message = (
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {title}\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {time_range}\n"
                f"–ú–µ—Å—Ç–æ: {place}\n"
                f"–°–ø–∏–∫–µ—Ä: {speaker}"
            )

            if event.active:
                message = "–°–µ–π—á–∞—Å –∏–¥—ë—Ç:\n\n" + message

            messages.append(message)

        for message in messages:
            context.bot.send_message(chat_id=chat_id, text=message)
        return

    if text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = "awaiting_question"
        context.bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    if text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π":
        chat_id = update.effective_chat.id
        username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        participant, created = Participant.objects.get_or_create(
            tg_id=chat_id,
            defaults={"name": username}
        )

        if not participant.subscriber:
            participant.subscriber = True
            participant.save()
            context.bot.send_message(chat_id=chat_id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–∏–∫–µ—Ä–æ–≤!")
        else:
            context.bot.send_message(chat_id=chat_id, text="–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        return

    if text == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å":
        user_states[user_id] = "choosing_donation"
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:",
            reply_markup=build_donate_menu()
        )
        return

    if user_states.get(user_id) == "choosing_donation" and text.isdigit():
        user_states[user_id] = None
        amount = int(text) * 100

        context.bot.send_invoice(
            chat_id=chat_id,
            title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
            description=f"–í—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ {text}‚ÇΩ",
            payload="donate_payload_001",
            provider_token=os.getenv("TELEGRAM_PROVIDER_TOKEN"),
            currency="RUB",
            prices=[LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", amount=amount)],
            start_parameter="test-start"
        )
        return

    if user_states.get(user_id) == "choosing_donation" and text == "–°–≤–æ—è —Å—É–º–º–∞":
        user_states[user_id] = "awaiting_custom_amount"
        context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150):")
        return

    if user_states.get(user_id) == "awaiting_custom_amount":
        try:
            amount = int(text)
            if amount < 10:
                context.bot.send_message(chat_id=chat_id, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 10‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            user_states[user_id] = None

            context.bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
                description=f"–í—ã –ø–æ–∂–µ—Ä—Ç–≤—É–µ—Ç–µ {amount}‚ÇΩ",
                payload="donate_payload_001",
                provider_token=os.getenv("TELEGRAM_PROVIDER_TOKEN"),
                currency="RUB",
                prices=[LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", amount=amount * 100)],
                start_parameter="test-start"
            )
        except ValueError:
            context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150)")
        return

    if text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        participant = Participant.objects.filter(tg_id=user_id).first()
        if participant and participant.organizer:
            user_states[user_id] = "awaiting_broadcast_text"
            context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:")
        else:
            context.bot.send_message(chat_id=chat_id, text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.")
        return

    if user_states.get(user_id) == "awaiting_broadcast_text":
        user_states[user_id] = None

        header = "‚ö° –ù–æ–≤–æ—Å—Ç—å –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:"
        message_text = text

        recipients = Participant.objects.filter(subscriber=True, tg_id__isnull=False)

        for sub in recipients:
            try:
                context.bot.send_message(
                    chat_id=sub.tg_id,
                    text=f"<b>{header}</b>\n\n{message_text}",
                    parse_mode="HTML"
                )
            except Exception as error:
                pass

        message = Message.objects.create(
            header=header,
            message=message_text,
            creation_date=now(),
            send_status=True
        )
        message.recipent.set(recipients)

        context.bot.send_message(chat_id=chat_id, text="–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        send_main_menu(chat_id, context)
        return

    if text == "–ù–∞–∑–∞–¥":
        user_states[user_id] = None
        send_main_menu(chat_id, context)
        return

    context.bot.send_message(
        chat_id=chat_id,
        text="–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=build_main_menu()
    )


def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    if query.invoice_payload != "donate_payload_001":
        query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
    else:
        query.answer(ok=True)


def successful_payment_callback(update: Update, context: CallbackContext):
    tg_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    amount_rub = update.message.successful_payment.total_amount / 100

    participant, _ = Participant.objects.get_or_create(
        tg_id=tg_id,
        defaults={"name": username}
    )

    Donat.objects.create(
        donater=participant,
        size=Decimal(str(amount_rub))
    )

    update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")


def main():
    load_dotenv()
    telegram_bot_token = os.getenv("TELEGRAM_TOKEN")

    updater = Updater(telegram_bot_token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
