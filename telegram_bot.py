import os
import django


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "telegramm_bot.settings")
django.setup()


from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, LabeledPrice
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, PreCheckoutQueryHandler
from bot.models import Participant, Donat
from decimal import Decimal


def build_main_menu():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    buttons = [
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π"],
        ["üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def build_donate_menu():
    buttons = [
        ["100", "200", "500"],
        ["–°–≤–æ—è —Å—É–º–º–∞"],
        ["–ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def send_main_menu(chat_id: int, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ",
        reply_markup=build_main_menu()
    )


def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é"""
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –∏ —Å–ø–∏–∫–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!"

    chat_id = update.effective_chat.id
    context.bot.send_message(
        chat_id=chat_id,
        text=welcome_text
    )
    send_main_menu(chat_id, context)


def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    user_states = context.bot_data.setdefault("user_states", {})

    if user_states.get(user_id) == "awaiting_question":
        user_states[user_id] = None

        context.bot.send_message(
            chat_id=chat_id,
            text="–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω."
        )

        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        if admin_chat_id:
            context.bot.send_message(
                chat_id=admin_chat_id,
                text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{update.effective_user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}:\n{text}"
            )
        return send_main_menu(chat_id, context)

    if text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É":
        context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return

    if text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = "awaiting_question"
        context.bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    if text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π":
        chat_id = update.effective_chat.id
        username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        participant, created = Participant.objects.get_or_create(
            tg_id=chat_id,
            defaults={"name": username}
        )

        if not participant.subscriber:
            participant.subscriber = True
            participant.save()
            context.bot.send_message(chat_id=chat_id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–∏–∫–µ—Ä–æ–≤!")
        else:
            context.bot.send_message(chat_id=chat_id, text="–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        return

    if text == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å":
        user_states[user_id] = "choosing_donation"
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:",
            reply_markup=build_donate_menu()
        )
        return

    if user_states.get(user_id) == "choosing_donation" and text.isdigit():
        user_states[user_id] = None
        amount = int(text) * 100

        context.bot.send_invoice(
            chat_id=chat_id,
            title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
            description=f"–í—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ {text}‚ÇΩ",
            payload="donate_payload_001",
            provider_token=os.getenv("TELEGRAM_PROVIDER_TOKEN"),
            currency="RUB",
            prices=[LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", amount=amount)],
            start_parameter="test-start"
        )
        return

    if user_states.get(user_id) == "choosing_donation" and text == "–°–≤–æ—è —Å—É–º–º–∞":
        user_states[user_id] = "awaiting_custom_amount"
        context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150):")
        return

    if user_states.get(user_id) == "awaiting_custom_amount":
        try:
            amount = int(text)
            if amount < 10:
                context.bot.send_message(chat_id=chat_id, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 10‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            user_states[user_id] = None

            context.bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
                description=f"–í—ã –ø–æ–∂–µ—Ä—Ç–≤—É–µ—Ç–µ {amount}‚ÇΩ",
                payload="donate_payload_001",
                provider_token=os.getenv("TELEGRAM_PROVIDER_TOKEN"),
                currency="RUB",
                prices=[LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", amount=amount * 100)],
                start_parameter="test-start"
            )
        except ValueError:
            context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150)")
        return

    if text == "–ù–∞–∑–∞–¥":
        user_states[user_id] = None
        send_main_menu(chat_id, context)
        return

    context.bot.send_message(
        chat_id=chat_id,
        text="–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=build_main_menu()
    )


def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    if query.invoice_payload != "donate_payload_001":
        query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
    else:
        query.answer(ok=True)


def successful_payment_callback(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    tg_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    amount_rub = update.message.successful_payment.total_amount / 100

    participant, _ = Participant.objects.get_or_create(
        tg_id=tg_id,
        defaults={"name": username}
    )

    Donat.objects.create(
        donater=participant,
        size=Decimal(str(amount_rub))
    )

    update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")


def main():
    load_dotenv()
    telegram_bot_token = os.getenv("TELEGRAM_TOKEN")

    updater = Updater(telegram_bot_token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
