from bot.models import Event
from bot.event_utils import update_event_activity
from django.utils.timezone import now


def format_event_info(event, highlight=False):
    date = event.start.strftime("%d.%m.%Y")
    time_range = f"{event.start.strftime('%H:%M')}‚Äì{event.finish.strftime('%H:%M')}"
    place = event.place.name if event.place else "–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ"
    speaker_queryset = event.speaker.all()
    speaker_names = ", ".join(speaker.name for speaker in speaker_queryset)
    speakers = speaker_names or "–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ"

    return (
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {time_range}\n"
        f"–ú–µ—Å—Ç–æ: {place}\n"
        f"–°–ø–∏–∫–µ—Ä(—ã): {speakers}"
    )


def handle_show_program(chat_id, context):
    update_event_activity()

    events = Event.objects.filter(finish__gte=now()).order_by("start")
    if not events.exists():
        context.bot.send_message(
            chat_id=chat_id,
            text="–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
        )
        return

    active_events = [event for event in events if event.active]
    upcoming_events = [event for event in events if not event.active]

    if active_events:
        context.bot.send_message(
            chat_id=chat_id,
            text="üïí <b>–°–µ–π—á–∞—Å –∏–¥—ë—Ç:</b>",
            parse_mode="HTML"
        )
        for event in active_events:
            message = format_event_info(event)
            context.bot.send_message(chat_id=chat_id, text=message)

    if upcoming_events:
        context.bot.send_message(
            chat_id=chat_id,
            text="üìÖ <b>–û–∂–∏–¥–∞–µ—Ç—Å—è:</b>",
            parse_mode="HTML"
        )
        for event in upcoming_events:
            message = format_event_info(event)
            context.bot.send_message(chat_id=chat_id, text=message)
